// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "SecretTextProtocol.pb.h"
// @@protoc_insertion_point(imports)

@implementation SecretTextProtocolRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [SecretTextProtocolRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface ProtoSecretMessage ()
@property (strong) NSData* coreKey;
@property UInt32 counter;
@property UInt32 previousCounter;
@property (strong) NSData* ciphertext;
@end

@implementation ProtoSecretMessage

- (BOOL) hasCoreKey {
  return !!hasCoreKey_;
}
- (void) setHasCoreKey:(BOOL) _value_ {
  hasCoreKey_ = !!_value_;
}
@synthesize coreKey;
- (BOOL) hasCounter {
  return !!hasCounter_;
}
- (void) setHasCounter:(BOOL) _value_ {
  hasCounter_ = !!_value_;
}
@synthesize counter;
- (BOOL) hasPreviousCounter {
  return !!hasPreviousCounter_;
}
- (void) setHasPreviousCounter:(BOOL) _value_ {
  hasPreviousCounter_ = !!_value_;
}
@synthesize previousCounter;
- (BOOL) hasCiphertext {
  return !!hasCiphertext_;
}
- (void) setHasCiphertext:(BOOL) _value_ {
  hasCiphertext_ = !!_value_;
}
@synthesize ciphertext;
- (instancetype) init {
  if ((self = [super init])) {
    self.coreKey = [NSData data];
    self.counter = 0;
    self.previousCounter = 0;
    self.ciphertext = [NSData data];
  }
  return self;
}
static ProtoSecretMessage* defaultProtoSecretMessageInstance = nil;
+ (void) initialize {
  if (self == [ProtoSecretMessage class]) {
    defaultProtoSecretMessageInstance = [[ProtoSecretMessage alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultProtoSecretMessageInstance;
}
- (instancetype) defaultInstance {
  return defaultProtoSecretMessageInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCoreKey) {
    [output writeData:1 value:self.coreKey];
  }
  if (self.hasCounter) {
    [output writeUInt32:2 value:self.counter];
  }
  if (self.hasPreviousCounter) {
    [output writeUInt32:3 value:self.previousCounter];
  }
  if (self.hasCiphertext) {
    [output writeData:4 value:self.ciphertext];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasCoreKey) {
    size_ += computeDataSize(1, self.coreKey);
  }
  if (self.hasCounter) {
    size_ += computeUInt32Size(2, self.counter);
  }
  if (self.hasPreviousCounter) {
    size_ += computeUInt32Size(3, self.previousCounter);
  }
  if (self.hasCiphertext) {
    size_ += computeDataSize(4, self.ciphertext);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ProtoSecretMessage*) parseFromData:(NSData*) data {
  return (ProtoSecretMessage*)[[[ProtoSecretMessage builder] mergeFromData:data] build];
}
+ (ProtoSecretMessage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ProtoSecretMessage*)[[[ProtoSecretMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ProtoSecretMessage*) parseFromInputStream:(NSInputStream*) input {
  return (ProtoSecretMessage*)[[[ProtoSecretMessage builder] mergeFromInputStream:input] build];
}
+ (ProtoSecretMessage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ProtoSecretMessage*)[[[ProtoSecretMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ProtoSecretMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ProtoSecretMessage*)[[[ProtoSecretMessage builder] mergeFromCodedInputStream:input] build];
}
+ (ProtoSecretMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ProtoSecretMessage*)[[[ProtoSecretMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ProtoSecretMessageBuilder*) builder {
  return [[ProtoSecretMessageBuilder alloc] init];
}
+ (ProtoSecretMessageBuilder*) builderWithPrototype:(ProtoSecretMessage*) prototype {
  return [[ProtoSecretMessage builder] mergeFrom:prototype];
}
- (ProtoSecretMessageBuilder*) builder {
  return [ProtoSecretMessage builder];
}
- (ProtoSecretMessageBuilder*) toBuilder {
  return [ProtoSecretMessage builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCoreKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"coreKey", self.coreKey];
  }
  if (self.hasCounter) {
    [output appendFormat:@"%@%@: %@\n", indent, @"counter", [NSNumber numberWithInteger:self.counter]];
  }
  if (self.hasPreviousCounter) {
    [output appendFormat:@"%@%@: %@\n", indent, @"previousCounter", [NSNumber numberWithInteger:self.previousCounter]];
  }
  if (self.hasCiphertext) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ciphertext", self.ciphertext];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasCoreKey) {
    [dictionary setObject: self.coreKey forKey: @"coreKey"];
  }
  if (self.hasCounter) {
    [dictionary setObject: [NSNumber numberWithInteger:self.counter] forKey: @"counter"];
  }
  if (self.hasPreviousCounter) {
    [dictionary setObject: [NSNumber numberWithInteger:self.previousCounter] forKey: @"previousCounter"];
  }
  if (self.hasCiphertext) {
    [dictionary setObject: self.ciphertext forKey: @"ciphertext"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ProtoSecretMessage class]]) {
    return NO;
  }
  ProtoSecretMessage *otherMessage = other;
  return
      self.hasCoreKey == otherMessage.hasCoreKey &&
      (!self.hasCoreKey || [self.coreKey isEqual:otherMessage.coreKey]) &&
      self.hasCounter == otherMessage.hasCounter &&
      (!self.hasCounter || self.counter == otherMessage.counter) &&
      self.hasPreviousCounter == otherMessage.hasPreviousCounter &&
      (!self.hasPreviousCounter || self.previousCounter == otherMessage.previousCounter) &&
      self.hasCiphertext == otherMessage.hasCiphertext &&
      (!self.hasCiphertext || [self.ciphertext isEqual:otherMessage.ciphertext]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasCoreKey) {
    hashCode = hashCode * 31 + [self.coreKey hash];
  }
  if (self.hasCounter) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.counter] hash];
  }
  if (self.hasPreviousCounter) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.previousCounter] hash];
  }
  if (self.hasCiphertext) {
    hashCode = hashCode * 31 + [self.ciphertext hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ProtoSecretMessageBuilder()
@property (strong) ProtoSecretMessage* resultProtoSecretMessage;
@end

@implementation ProtoSecretMessageBuilder
@synthesize resultProtoSecretMessage;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultProtoSecretMessage = [[ProtoSecretMessage alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultProtoSecretMessage;
}
- (ProtoSecretMessageBuilder*) clear {
  self.resultProtoSecretMessage = [[ProtoSecretMessage alloc] init];
  return self;
}
- (ProtoSecretMessageBuilder*) clone {
  return [ProtoSecretMessage builderWithPrototype:resultProtoSecretMessage];
}
- (ProtoSecretMessage*) defaultInstance {
  return [ProtoSecretMessage defaultInstance];
}
- (ProtoSecretMessage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ProtoSecretMessage*) buildPartial {
  ProtoSecretMessage* returnMe = resultProtoSecretMessage;
  self.resultProtoSecretMessage = nil;
  return returnMe;
}
- (ProtoSecretMessageBuilder*) mergeFrom:(ProtoSecretMessage*) other {
  if (other == [ProtoSecretMessage defaultInstance]) {
    return self;
  }
  if (other.hasCoreKey) {
    [self setCoreKey:other.coreKey];
  }
  if (other.hasCounter) {
    [self setCounter:other.counter];
  }
  if (other.hasPreviousCounter) {
    [self setPreviousCounter:other.previousCounter];
  }
  if (other.hasCiphertext) {
    [self setCiphertext:other.ciphertext];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ProtoSecretMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ProtoSecretMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setCoreKey:[input readData]];
        break;
      }
      case 16: {
        [self setCounter:[input readUInt32]];
        break;
      }
      case 24: {
        [self setPreviousCounter:[input readUInt32]];
        break;
      }
      case 34: {
        [self setCiphertext:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasCoreKey {
  return resultProtoSecretMessage.hasCoreKey;
}
- (NSData*) coreKey {
  return resultProtoSecretMessage.coreKey;
}
- (ProtoSecretMessageBuilder*) setCoreKey:(NSData*) value {
  resultProtoSecretMessage.hasCoreKey = YES;
  resultProtoSecretMessage.coreKey = value;
  return self;
}
- (ProtoSecretMessageBuilder*) clearCoreKey {
  resultProtoSecretMessage.hasCoreKey = NO;
  resultProtoSecretMessage.coreKey = [NSData data];
  return self;
}
- (BOOL) hasCounter {
  return resultProtoSecretMessage.hasCounter;
}
- (UInt32) counter {
  return resultProtoSecretMessage.counter;
}
- (ProtoSecretMessageBuilder*) setCounter:(UInt32) value {
  resultProtoSecretMessage.hasCounter = YES;
  resultProtoSecretMessage.counter = value;
  return self;
}
- (ProtoSecretMessageBuilder*) clearCounter {
  resultProtoSecretMessage.hasCounter = NO;
  resultProtoSecretMessage.counter = 0;
  return self;
}
- (BOOL) hasPreviousCounter {
  return resultProtoSecretMessage.hasPreviousCounter;
}
- (UInt32) previousCounter {
  return resultProtoSecretMessage.previousCounter;
}
- (ProtoSecretMessageBuilder*) setPreviousCounter:(UInt32) value {
  resultProtoSecretMessage.hasPreviousCounter = YES;
  resultProtoSecretMessage.previousCounter = value;
  return self;
}
- (ProtoSecretMessageBuilder*) clearPreviousCounter {
  resultProtoSecretMessage.hasPreviousCounter = NO;
  resultProtoSecretMessage.previousCounter = 0;
  return self;
}
- (BOOL) hasCiphertext {
  return resultProtoSecretMessage.hasCiphertext;
}
- (NSData*) ciphertext {
  return resultProtoSecretMessage.ciphertext;
}
- (ProtoSecretMessageBuilder*) setCiphertext:(NSData*) value {
  resultProtoSecretMessage.hasCiphertext = YES;
  resultProtoSecretMessage.ciphertext = value;
  return self;
}
- (ProtoSecretMessageBuilder*) clearCiphertext {
  resultProtoSecretMessage.hasCiphertext = NO;
  resultProtoSecretMessage.ciphertext = [NSData data];
  return self;
}
@end

@interface ProtoInitKeySecretMessage ()
@property (strong) NSString* registrationId;
@property UInt32 initKeyId;
@property (strong) NSString* signedInitKeyId;
@property (strong) NSData* baseKey;
@property (strong) NSData* identityKey;
@property (strong) NSData* message;
@end

@implementation ProtoInitKeySecretMessage

- (BOOL) hasRegistrationId {
  return !!hasRegistrationId_;
}
- (void) setHasRegistrationId:(BOOL) _value_ {
  hasRegistrationId_ = !!_value_;
}
@synthesize registrationId;
- (BOOL) hasInitKeyId {
  return !!hasInitKeyId_;
}
- (void) setHasInitKeyId:(BOOL) _value_ {
  hasInitKeyId_ = !!_value_;
}
@synthesize initKeyId;
- (BOOL) hasSignedInitKeyId {
  return !!hasSignedInitKeyId_;
}
- (void) setHasSignedInitKeyId:(BOOL) _value_ {
  hasSignedInitKeyId_ = !!_value_;
}
@synthesize signedInitKeyId;
- (BOOL) hasBaseKey {
  return !!hasBaseKey_;
}
- (void) setHasBaseKey:(BOOL) _value_ {
  hasBaseKey_ = !!_value_;
}
@synthesize baseKey;
- (BOOL) hasIdentityKey {
  return !!hasIdentityKey_;
}
- (void) setHasIdentityKey:(BOOL) _value_ {
  hasIdentityKey_ = !!_value_;
}
@synthesize identityKey;
- (BOOL) hasMessage {
  return !!hasMessage_;
}
- (void) setHasMessage:(BOOL) _value_ {
  hasMessage_ = !!_value_;
}
@synthesize message;
- (instancetype) init {
  if ((self = [super init])) {
    self.registrationId = @"";
    self.initKeyId = 0;
    self.signedInitKeyId = @"";
    self.baseKey = [NSData data];
    self.identityKey = [NSData data];
    self.message = [NSData data];
  }
  return self;
}
static ProtoInitKeySecretMessage* defaultProtoInitKeySecretMessageInstance = nil;
+ (void) initialize {
  if (self == [ProtoInitKeySecretMessage class]) {
    defaultProtoInitKeySecretMessageInstance = [[ProtoInitKeySecretMessage alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultProtoInitKeySecretMessageInstance;
}
- (instancetype) defaultInstance {
  return defaultProtoInitKeySecretMessageInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasInitKeyId) {
    [output writeUInt32:1 value:self.initKeyId];
  }
  if (self.hasBaseKey) {
    [output writeData:2 value:self.baseKey];
  }
  if (self.hasIdentityKey) {
    [output writeData:3 value:self.identityKey];
  }
  if (self.hasMessage) {
    [output writeData:4 value:self.message];
  }
  if (self.hasRegistrationId) {
    [output writeString:5 value:self.registrationId];
  }
  if (self.hasSignedInitKeyId) {
    [output writeString:6 value:self.signedInitKeyId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasInitKeyId) {
    size_ += computeUInt32Size(1, self.initKeyId);
  }
  if (self.hasBaseKey) {
    size_ += computeDataSize(2, self.baseKey);
  }
  if (self.hasIdentityKey) {
    size_ += computeDataSize(3, self.identityKey);
  }
  if (self.hasMessage) {
    size_ += computeDataSize(4, self.message);
  }
  if (self.hasRegistrationId) {
    size_ += computeStringSize(5, self.registrationId);
  }
  if (self.hasSignedInitKeyId) {
    size_ += computeStringSize(6, self.signedInitKeyId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ProtoInitKeySecretMessage*) parseFromData:(NSData*) data {
  return (ProtoInitKeySecretMessage*)[[[ProtoInitKeySecretMessage builder] mergeFromData:data] build];
}
+ (ProtoInitKeySecretMessage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ProtoInitKeySecretMessage*)[[[ProtoInitKeySecretMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ProtoInitKeySecretMessage*) parseFromInputStream:(NSInputStream*) input {
  return (ProtoInitKeySecretMessage*)[[[ProtoInitKeySecretMessage builder] mergeFromInputStream:input] build];
}
+ (ProtoInitKeySecretMessage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ProtoInitKeySecretMessage*)[[[ProtoInitKeySecretMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ProtoInitKeySecretMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ProtoInitKeySecretMessage*)[[[ProtoInitKeySecretMessage builder] mergeFromCodedInputStream:input] build];
}
+ (ProtoInitKeySecretMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ProtoInitKeySecretMessage*)[[[ProtoInitKeySecretMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ProtoInitKeySecretMessageBuilder*) builder {
  return [[ProtoInitKeySecretMessageBuilder alloc] init];
}
+ (ProtoInitKeySecretMessageBuilder*) builderWithPrototype:(ProtoInitKeySecretMessage*) prototype {
  return [[ProtoInitKeySecretMessage builder] mergeFrom:prototype];
}
- (ProtoInitKeySecretMessageBuilder*) builder {
  return [ProtoInitKeySecretMessage builder];
}
- (ProtoInitKeySecretMessageBuilder*) toBuilder {
  return [ProtoInitKeySecretMessage builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasInitKeyId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"initKeyId", [NSNumber numberWithInteger:self.initKeyId]];
  }
  if (self.hasBaseKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"baseKey", self.baseKey];
  }
  if (self.hasIdentityKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"identityKey", self.identityKey];
  }
  if (self.hasMessage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"message", self.message];
  }
  if (self.hasRegistrationId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"registrationId", self.registrationId];
  }
  if (self.hasSignedInitKeyId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"signedInitKeyId", self.signedInitKeyId];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasInitKeyId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.initKeyId] forKey: @"initKeyId"];
  }
  if (self.hasBaseKey) {
    [dictionary setObject: self.baseKey forKey: @"baseKey"];
  }
  if (self.hasIdentityKey) {
    [dictionary setObject: self.identityKey forKey: @"identityKey"];
  }
  if (self.hasMessage) {
    [dictionary setObject: self.message forKey: @"message"];
  }
  if (self.hasRegistrationId) {
    [dictionary setObject: self.registrationId forKey: @"registrationId"];
  }
  if (self.hasSignedInitKeyId) {
    [dictionary setObject: self.signedInitKeyId forKey: @"signedInitKeyId"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ProtoInitKeySecretMessage class]]) {
    return NO;
  }
  ProtoInitKeySecretMessage *otherMessage = other;
  return
      self.hasInitKeyId == otherMessage.hasInitKeyId &&
      (!self.hasInitKeyId || self.initKeyId == otherMessage.initKeyId) &&
      self.hasBaseKey == otherMessage.hasBaseKey &&
      (!self.hasBaseKey || [self.baseKey isEqual:otherMessage.baseKey]) &&
      self.hasIdentityKey == otherMessage.hasIdentityKey &&
      (!self.hasIdentityKey || [self.identityKey isEqual:otherMessage.identityKey]) &&
      self.hasMessage == otherMessage.hasMessage &&
      (!self.hasMessage || [self.message isEqual:otherMessage.message]) &&
      self.hasRegistrationId == otherMessage.hasRegistrationId &&
      (!self.hasRegistrationId || [self.registrationId isEqual:otherMessage.registrationId]) &&
      self.hasSignedInitKeyId == otherMessage.hasSignedInitKeyId &&
      (!self.hasSignedInitKeyId || [self.signedInitKeyId isEqual:otherMessage.signedInitKeyId]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasInitKeyId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.initKeyId] hash];
  }
  if (self.hasBaseKey) {
    hashCode = hashCode * 31 + [self.baseKey hash];
  }
  if (self.hasIdentityKey) {
    hashCode = hashCode * 31 + [self.identityKey hash];
  }
  if (self.hasMessage) {
    hashCode = hashCode * 31 + [self.message hash];
  }
  if (self.hasRegistrationId) {
    hashCode = hashCode * 31 + [self.registrationId hash];
  }
  if (self.hasSignedInitKeyId) {
    hashCode = hashCode * 31 + [self.signedInitKeyId hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ProtoInitKeySecretMessageBuilder()
@property (strong) ProtoInitKeySecretMessage* resultProtoInitKeySecretMessage;
@end

@implementation ProtoInitKeySecretMessageBuilder
@synthesize resultProtoInitKeySecretMessage;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultProtoInitKeySecretMessage = [[ProtoInitKeySecretMessage alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultProtoInitKeySecretMessage;
}
- (ProtoInitKeySecretMessageBuilder*) clear {
  self.resultProtoInitKeySecretMessage = [[ProtoInitKeySecretMessage alloc] init];
  return self;
}
- (ProtoInitKeySecretMessageBuilder*) clone {
  return [ProtoInitKeySecretMessage builderWithPrototype:resultProtoInitKeySecretMessage];
}
- (ProtoInitKeySecretMessage*) defaultInstance {
  return [ProtoInitKeySecretMessage defaultInstance];
}
- (ProtoInitKeySecretMessage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ProtoInitKeySecretMessage*) buildPartial {
  ProtoInitKeySecretMessage* returnMe = resultProtoInitKeySecretMessage;
  self.resultProtoInitKeySecretMessage = nil;
  return returnMe;
}
- (ProtoInitKeySecretMessageBuilder*) mergeFrom:(ProtoInitKeySecretMessage*) other {
  if (other == [ProtoInitKeySecretMessage defaultInstance]) {
    return self;
  }
  if (other.hasRegistrationId) {
    [self setRegistrationId:other.registrationId];
  }
  if (other.hasInitKeyId) {
    [self setInitKeyId:other.initKeyId];
  }
  if (other.hasSignedInitKeyId) {
    [self setSignedInitKeyId:other.signedInitKeyId];
  }
  if (other.hasBaseKey) {
    [self setBaseKey:other.baseKey];
  }
  if (other.hasIdentityKey) {
    [self setIdentityKey:other.identityKey];
  }
  if (other.hasMessage) {
    [self setMessage:other.message];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ProtoInitKeySecretMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ProtoInitKeySecretMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setInitKeyId:[input readUInt32]];
        break;
      }
      case 18: {
        [self setBaseKey:[input readData]];
        break;
      }
      case 26: {
        [self setIdentityKey:[input readData]];
        break;
      }
      case 34: {
        [self setMessage:[input readData]];
        break;
      }
      case 42: {
        [self setRegistrationId:[input readString]];
        break;
      }
      case 50: {
        [self setSignedInitKeyId:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasRegistrationId {
  return resultProtoInitKeySecretMessage.hasRegistrationId;
}
- (NSString*) registrationId {
  return resultProtoInitKeySecretMessage.registrationId;
}
- (ProtoInitKeySecretMessageBuilder*) setRegistrationId:(NSString*) value {
  resultProtoInitKeySecretMessage.hasRegistrationId = YES;
  resultProtoInitKeySecretMessage.registrationId = value;
  return self;
}
- (ProtoInitKeySecretMessageBuilder*) clearRegistrationId {
  resultProtoInitKeySecretMessage.hasRegistrationId = NO;
  resultProtoInitKeySecretMessage.registrationId = @"";
  return self;
}
- (BOOL) hasInitKeyId {
  return resultProtoInitKeySecretMessage.hasInitKeyId;
}
- (UInt32) initKeyId {
  return resultProtoInitKeySecretMessage.initKeyId;
}
- (ProtoInitKeySecretMessageBuilder*) setInitKeyId:(UInt32) value {
  resultProtoInitKeySecretMessage.hasInitKeyId = YES;
  resultProtoInitKeySecretMessage.initKeyId = value;
  return self;
}
- (ProtoInitKeySecretMessageBuilder*) clearInitKeyId {
  resultProtoInitKeySecretMessage.hasInitKeyId = NO;
  resultProtoInitKeySecretMessage.initKeyId = 0;
  return self;
}
- (BOOL) hasSignedInitKeyId {
  return resultProtoInitKeySecretMessage.hasSignedInitKeyId;
}
- (NSString*) signedInitKeyId {
  return resultProtoInitKeySecretMessage.signedInitKeyId;
}
- (ProtoInitKeySecretMessageBuilder*) setSignedInitKeyId:(NSString*) value {
  resultProtoInitKeySecretMessage.hasSignedInitKeyId = YES;
  resultProtoInitKeySecretMessage.signedInitKeyId = value;
  return self;
}
- (ProtoInitKeySecretMessageBuilder*) clearSignedInitKeyId {
  resultProtoInitKeySecretMessage.hasSignedInitKeyId = NO;
  resultProtoInitKeySecretMessage.signedInitKeyId = @"";
  return self;
}
- (BOOL) hasBaseKey {
  return resultProtoInitKeySecretMessage.hasBaseKey;
}
- (NSData*) baseKey {
  return resultProtoInitKeySecretMessage.baseKey;
}
- (ProtoInitKeySecretMessageBuilder*) setBaseKey:(NSData*) value {
  resultProtoInitKeySecretMessage.hasBaseKey = YES;
  resultProtoInitKeySecretMessage.baseKey = value;
  return self;
}
- (ProtoInitKeySecretMessageBuilder*) clearBaseKey {
  resultProtoInitKeySecretMessage.hasBaseKey = NO;
  resultProtoInitKeySecretMessage.baseKey = [NSData data];
  return self;
}
- (BOOL) hasIdentityKey {
  return resultProtoInitKeySecretMessage.hasIdentityKey;
}
- (NSData*) identityKey {
  return resultProtoInitKeySecretMessage.identityKey;
}
- (ProtoInitKeySecretMessageBuilder*) setIdentityKey:(NSData*) value {
  resultProtoInitKeySecretMessage.hasIdentityKey = YES;
  resultProtoInitKeySecretMessage.identityKey = value;
  return self;
}
- (ProtoInitKeySecretMessageBuilder*) clearIdentityKey {
  resultProtoInitKeySecretMessage.hasIdentityKey = NO;
  resultProtoInitKeySecretMessage.identityKey = [NSData data];
  return self;
}
- (BOOL) hasMessage {
  return resultProtoInitKeySecretMessage.hasMessage;
}
- (NSData*) message {
  return resultProtoInitKeySecretMessage.message;
}
- (ProtoInitKeySecretMessageBuilder*) setMessage:(NSData*) value {
  resultProtoInitKeySecretMessage.hasMessage = YES;
  resultProtoInitKeySecretMessage.message = value;
  return self;
}
- (ProtoInitKeySecretMessageBuilder*) clearMessage {
  resultProtoInitKeySecretMessage.hasMessage = NO;
  resultProtoInitKeySecretMessage.message = [NSData data];
  return self;
}
@end

@interface ProtoKeyExchangeMessage ()
@property UInt32 id;
@property (strong) NSData* baseKey;
@property (strong) NSData* coreKey;
@property (strong) NSData* identityKey;
@property (strong) NSData* baseKeySignature;
@end

@implementation ProtoKeyExchangeMessage

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (BOOL) hasBaseKey {
  return !!hasBaseKey_;
}
- (void) setHasBaseKey:(BOOL) _value_ {
  hasBaseKey_ = !!_value_;
}
@synthesize baseKey;
- (BOOL) hasCoreKey {
  return !!hasCoreKey_;
}
- (void) setHasCoreKey:(BOOL) _value_ {
  hasCoreKey_ = !!_value_;
}
@synthesize coreKey;
- (BOOL) hasIdentityKey {
  return !!hasIdentityKey_;
}
- (void) setHasIdentityKey:(BOOL) _value_ {
  hasIdentityKey_ = !!_value_;
}
@synthesize identityKey;
- (BOOL) hasBaseKeySignature {
  return !!hasBaseKeySignature_;
}
- (void) setHasBaseKeySignature:(BOOL) _value_ {
  hasBaseKeySignature_ = !!_value_;
}
@synthesize baseKeySignature;
- (instancetype) init {
  if ((self = [super init])) {
    self.id = 0;
    self.baseKey = [NSData data];
    self.coreKey = [NSData data];
    self.identityKey = [NSData data];
    self.baseKeySignature = [NSData data];
  }
  return self;
}
static ProtoKeyExchangeMessage* defaultProtoKeyExchangeMessageInstance = nil;
+ (void) initialize {
  if (self == [ProtoKeyExchangeMessage class]) {
    defaultProtoKeyExchangeMessageInstance = [[ProtoKeyExchangeMessage alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultProtoKeyExchangeMessageInstance;
}
- (instancetype) defaultInstance {
  return defaultProtoKeyExchangeMessageInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeUInt32:1 value:self.id];
  }
  if (self.hasBaseKey) {
    [output writeData:2 value:self.baseKey];
  }
  if (self.hasCoreKey) {
    [output writeData:3 value:self.coreKey];
  }
  if (self.hasIdentityKey) {
    [output writeData:4 value:self.identityKey];
  }
  if (self.hasBaseKeySignature) {
    [output writeData:5 value:self.baseKeySignature];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeUInt32Size(1, self.id);
  }
  if (self.hasBaseKey) {
    size_ += computeDataSize(2, self.baseKey);
  }
  if (self.hasCoreKey) {
    size_ += computeDataSize(3, self.coreKey);
  }
  if (self.hasIdentityKey) {
    size_ += computeDataSize(4, self.identityKey);
  }
  if (self.hasBaseKeySignature) {
    size_ += computeDataSize(5, self.baseKeySignature);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ProtoKeyExchangeMessage*) parseFromData:(NSData*) data {
  return (ProtoKeyExchangeMessage*)[[[ProtoKeyExchangeMessage builder] mergeFromData:data] build];
}
+ (ProtoKeyExchangeMessage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ProtoKeyExchangeMessage*)[[[ProtoKeyExchangeMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ProtoKeyExchangeMessage*) parseFromInputStream:(NSInputStream*) input {
  return (ProtoKeyExchangeMessage*)[[[ProtoKeyExchangeMessage builder] mergeFromInputStream:input] build];
}
+ (ProtoKeyExchangeMessage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ProtoKeyExchangeMessage*)[[[ProtoKeyExchangeMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ProtoKeyExchangeMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ProtoKeyExchangeMessage*)[[[ProtoKeyExchangeMessage builder] mergeFromCodedInputStream:input] build];
}
+ (ProtoKeyExchangeMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ProtoKeyExchangeMessage*)[[[ProtoKeyExchangeMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ProtoKeyExchangeMessageBuilder*) builder {
  return [[ProtoKeyExchangeMessageBuilder alloc] init];
}
+ (ProtoKeyExchangeMessageBuilder*) builderWithPrototype:(ProtoKeyExchangeMessage*) prototype {
  return [[ProtoKeyExchangeMessage builder] mergeFrom:prototype];
}
- (ProtoKeyExchangeMessageBuilder*) builder {
  return [ProtoKeyExchangeMessage builder];
}
- (ProtoKeyExchangeMessageBuilder*) toBuilder {
  return [ProtoKeyExchangeMessage builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInteger:self.id]];
  }
  if (self.hasBaseKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"baseKey", self.baseKey];
  }
  if (self.hasCoreKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"coreKey", self.coreKey];
  }
  if (self.hasIdentityKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"identityKey", self.identityKey];
  }
  if (self.hasBaseKeySignature) {
    [output appendFormat:@"%@%@: %@\n", indent, @"baseKeySignature", self.baseKeySignature];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.id] forKey: @"id"];
  }
  if (self.hasBaseKey) {
    [dictionary setObject: self.baseKey forKey: @"baseKey"];
  }
  if (self.hasCoreKey) {
    [dictionary setObject: self.coreKey forKey: @"coreKey"];
  }
  if (self.hasIdentityKey) {
    [dictionary setObject: self.identityKey forKey: @"identityKey"];
  }
  if (self.hasBaseKeySignature) {
    [dictionary setObject: self.baseKeySignature forKey: @"baseKeySignature"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ProtoKeyExchangeMessage class]]) {
    return NO;
  }
  ProtoKeyExchangeMessage *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasBaseKey == otherMessage.hasBaseKey &&
      (!self.hasBaseKey || [self.baseKey isEqual:otherMessage.baseKey]) &&
      self.hasCoreKey == otherMessage.hasCoreKey &&
      (!self.hasCoreKey || [self.coreKey isEqual:otherMessage.coreKey]) &&
      self.hasIdentityKey == otherMessage.hasIdentityKey &&
      (!self.hasIdentityKey || [self.identityKey isEqual:otherMessage.identityKey]) &&
      self.hasBaseKeySignature == otherMessage.hasBaseKeySignature &&
      (!self.hasBaseKeySignature || [self.baseKeySignature isEqual:otherMessage.baseKeySignature]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.id] hash];
  }
  if (self.hasBaseKey) {
    hashCode = hashCode * 31 + [self.baseKey hash];
  }
  if (self.hasCoreKey) {
    hashCode = hashCode * 31 + [self.coreKey hash];
  }
  if (self.hasIdentityKey) {
    hashCode = hashCode * 31 + [self.identityKey hash];
  }
  if (self.hasBaseKeySignature) {
    hashCode = hashCode * 31 + [self.baseKeySignature hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ProtoKeyExchangeMessageBuilder()
@property (strong) ProtoKeyExchangeMessage* resultProtoKeyExchangeMessage;
@end

@implementation ProtoKeyExchangeMessageBuilder
@synthesize resultProtoKeyExchangeMessage;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultProtoKeyExchangeMessage = [[ProtoKeyExchangeMessage alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultProtoKeyExchangeMessage;
}
- (ProtoKeyExchangeMessageBuilder*) clear {
  self.resultProtoKeyExchangeMessage = [[ProtoKeyExchangeMessage alloc] init];
  return self;
}
- (ProtoKeyExchangeMessageBuilder*) clone {
  return [ProtoKeyExchangeMessage builderWithPrototype:resultProtoKeyExchangeMessage];
}
- (ProtoKeyExchangeMessage*) defaultInstance {
  return [ProtoKeyExchangeMessage defaultInstance];
}
- (ProtoKeyExchangeMessage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ProtoKeyExchangeMessage*) buildPartial {
  ProtoKeyExchangeMessage* returnMe = resultProtoKeyExchangeMessage;
  self.resultProtoKeyExchangeMessage = nil;
  return returnMe;
}
- (ProtoKeyExchangeMessageBuilder*) mergeFrom:(ProtoKeyExchangeMessage*) other {
  if (other == [ProtoKeyExchangeMessage defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasBaseKey) {
    [self setBaseKey:other.baseKey];
  }
  if (other.hasCoreKey) {
    [self setCoreKey:other.coreKey];
  }
  if (other.hasIdentityKey) {
    [self setIdentityKey:other.identityKey];
  }
  if (other.hasBaseKeySignature) {
    [self setBaseKeySignature:other.baseKeySignature];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ProtoKeyExchangeMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ProtoKeyExchangeMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readUInt32]];
        break;
      }
      case 18: {
        [self setBaseKey:[input readData]];
        break;
      }
      case 26: {
        [self setCoreKey:[input readData]];
        break;
      }
      case 34: {
        [self setIdentityKey:[input readData]];
        break;
      }
      case 42: {
        [self setBaseKeySignature:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return resultProtoKeyExchangeMessage.hasId;
}
- (UInt32) id {
  return resultProtoKeyExchangeMessage.id;
}
- (ProtoKeyExchangeMessageBuilder*) setId:(UInt32) value {
  resultProtoKeyExchangeMessage.hasId = YES;
  resultProtoKeyExchangeMessage.id = value;
  return self;
}
- (ProtoKeyExchangeMessageBuilder*) clearId {
  resultProtoKeyExchangeMessage.hasId = NO;
  resultProtoKeyExchangeMessage.id = 0;
  return self;
}
- (BOOL) hasBaseKey {
  return resultProtoKeyExchangeMessage.hasBaseKey;
}
- (NSData*) baseKey {
  return resultProtoKeyExchangeMessage.baseKey;
}
- (ProtoKeyExchangeMessageBuilder*) setBaseKey:(NSData*) value {
  resultProtoKeyExchangeMessage.hasBaseKey = YES;
  resultProtoKeyExchangeMessage.baseKey = value;
  return self;
}
- (ProtoKeyExchangeMessageBuilder*) clearBaseKey {
  resultProtoKeyExchangeMessage.hasBaseKey = NO;
  resultProtoKeyExchangeMessage.baseKey = [NSData data];
  return self;
}
- (BOOL) hasCoreKey {
  return resultProtoKeyExchangeMessage.hasCoreKey;
}
- (NSData*) coreKey {
  return resultProtoKeyExchangeMessage.coreKey;
}
- (ProtoKeyExchangeMessageBuilder*) setCoreKey:(NSData*) value {
  resultProtoKeyExchangeMessage.hasCoreKey = YES;
  resultProtoKeyExchangeMessage.coreKey = value;
  return self;
}
- (ProtoKeyExchangeMessageBuilder*) clearCoreKey {
  resultProtoKeyExchangeMessage.hasCoreKey = NO;
  resultProtoKeyExchangeMessage.coreKey = [NSData data];
  return self;
}
- (BOOL) hasIdentityKey {
  return resultProtoKeyExchangeMessage.hasIdentityKey;
}
- (NSData*) identityKey {
  return resultProtoKeyExchangeMessage.identityKey;
}
- (ProtoKeyExchangeMessageBuilder*) setIdentityKey:(NSData*) value {
  resultProtoKeyExchangeMessage.hasIdentityKey = YES;
  resultProtoKeyExchangeMessage.identityKey = value;
  return self;
}
- (ProtoKeyExchangeMessageBuilder*) clearIdentityKey {
  resultProtoKeyExchangeMessage.hasIdentityKey = NO;
  resultProtoKeyExchangeMessage.identityKey = [NSData data];
  return self;
}
- (BOOL) hasBaseKeySignature {
  return resultProtoKeyExchangeMessage.hasBaseKeySignature;
}
- (NSData*) baseKeySignature {
  return resultProtoKeyExchangeMessage.baseKeySignature;
}
- (ProtoKeyExchangeMessageBuilder*) setBaseKeySignature:(NSData*) value {
  resultProtoKeyExchangeMessage.hasBaseKeySignature = YES;
  resultProtoKeyExchangeMessage.baseKeySignature = value;
  return self;
}
- (ProtoKeyExchangeMessageBuilder*) clearBaseKeySignature {
  resultProtoKeyExchangeMessage.hasBaseKeySignature = NO;
  resultProtoKeyExchangeMessage.baseKeySignature = [NSData data];
  return self;
}
@end

@interface ProtoSenderKeyMessage ()
@property UInt32 id;
@property UInt32 iteration;
@property (strong) NSData* ciphertext;
@end

@implementation ProtoSenderKeyMessage

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (BOOL) hasIteration {
  return !!hasIteration_;
}
- (void) setHasIteration:(BOOL) _value_ {
  hasIteration_ = !!_value_;
}
@synthesize iteration;
- (BOOL) hasCiphertext {
  return !!hasCiphertext_;
}
- (void) setHasCiphertext:(BOOL) _value_ {
  hasCiphertext_ = !!_value_;
}
@synthesize ciphertext;
- (instancetype) init {
  if ((self = [super init])) {
    self.id = 0;
    self.iteration = 0;
    self.ciphertext = [NSData data];
  }
  return self;
}
static ProtoSenderKeyMessage* defaultProtoSenderKeyMessageInstance = nil;
+ (void) initialize {
  if (self == [ProtoSenderKeyMessage class]) {
    defaultProtoSenderKeyMessageInstance = [[ProtoSenderKeyMessage alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultProtoSenderKeyMessageInstance;
}
- (instancetype) defaultInstance {
  return defaultProtoSenderKeyMessageInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeUInt32:1 value:self.id];
  }
  if (self.hasIteration) {
    [output writeUInt32:2 value:self.iteration];
  }
  if (self.hasCiphertext) {
    [output writeData:3 value:self.ciphertext];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeUInt32Size(1, self.id);
  }
  if (self.hasIteration) {
    size_ += computeUInt32Size(2, self.iteration);
  }
  if (self.hasCiphertext) {
    size_ += computeDataSize(3, self.ciphertext);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ProtoSenderKeyMessage*) parseFromData:(NSData*) data {
  return (ProtoSenderKeyMessage*)[[[ProtoSenderKeyMessage builder] mergeFromData:data] build];
}
+ (ProtoSenderKeyMessage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ProtoSenderKeyMessage*)[[[ProtoSenderKeyMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ProtoSenderKeyMessage*) parseFromInputStream:(NSInputStream*) input {
  return (ProtoSenderKeyMessage*)[[[ProtoSenderKeyMessage builder] mergeFromInputStream:input] build];
}
+ (ProtoSenderKeyMessage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ProtoSenderKeyMessage*)[[[ProtoSenderKeyMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ProtoSenderKeyMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ProtoSenderKeyMessage*)[[[ProtoSenderKeyMessage builder] mergeFromCodedInputStream:input] build];
}
+ (ProtoSenderKeyMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ProtoSenderKeyMessage*)[[[ProtoSenderKeyMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ProtoSenderKeyMessageBuilder*) builder {
  return [[ProtoSenderKeyMessageBuilder alloc] init];
}
+ (ProtoSenderKeyMessageBuilder*) builderWithPrototype:(ProtoSenderKeyMessage*) prototype {
  return [[ProtoSenderKeyMessage builder] mergeFrom:prototype];
}
- (ProtoSenderKeyMessageBuilder*) builder {
  return [ProtoSenderKeyMessage builder];
}
- (ProtoSenderKeyMessageBuilder*) toBuilder {
  return [ProtoSenderKeyMessage builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInteger:self.id]];
  }
  if (self.hasIteration) {
    [output appendFormat:@"%@%@: %@\n", indent, @"iteration", [NSNumber numberWithInteger:self.iteration]];
  }
  if (self.hasCiphertext) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ciphertext", self.ciphertext];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.id] forKey: @"id"];
  }
  if (self.hasIteration) {
    [dictionary setObject: [NSNumber numberWithInteger:self.iteration] forKey: @"iteration"];
  }
  if (self.hasCiphertext) {
    [dictionary setObject: self.ciphertext forKey: @"ciphertext"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ProtoSenderKeyMessage class]]) {
    return NO;
  }
  ProtoSenderKeyMessage *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasIteration == otherMessage.hasIteration &&
      (!self.hasIteration || self.iteration == otherMessage.iteration) &&
      self.hasCiphertext == otherMessage.hasCiphertext &&
      (!self.hasCiphertext || [self.ciphertext isEqual:otherMessage.ciphertext]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.id] hash];
  }
  if (self.hasIteration) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.iteration] hash];
  }
  if (self.hasCiphertext) {
    hashCode = hashCode * 31 + [self.ciphertext hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ProtoSenderKeyMessageBuilder()
@property (strong) ProtoSenderKeyMessage* resultProtoSenderKeyMessage;
@end

@implementation ProtoSenderKeyMessageBuilder
@synthesize resultProtoSenderKeyMessage;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultProtoSenderKeyMessage = [[ProtoSenderKeyMessage alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultProtoSenderKeyMessage;
}
- (ProtoSenderKeyMessageBuilder*) clear {
  self.resultProtoSenderKeyMessage = [[ProtoSenderKeyMessage alloc] init];
  return self;
}
- (ProtoSenderKeyMessageBuilder*) clone {
  return [ProtoSenderKeyMessage builderWithPrototype:resultProtoSenderKeyMessage];
}
- (ProtoSenderKeyMessage*) defaultInstance {
  return [ProtoSenderKeyMessage defaultInstance];
}
- (ProtoSenderKeyMessage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ProtoSenderKeyMessage*) buildPartial {
  ProtoSenderKeyMessage* returnMe = resultProtoSenderKeyMessage;
  self.resultProtoSenderKeyMessage = nil;
  return returnMe;
}
- (ProtoSenderKeyMessageBuilder*) mergeFrom:(ProtoSenderKeyMessage*) other {
  if (other == [ProtoSenderKeyMessage defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasIteration) {
    [self setIteration:other.iteration];
  }
  if (other.hasCiphertext) {
    [self setCiphertext:other.ciphertext];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ProtoSenderKeyMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ProtoSenderKeyMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setIteration:[input readUInt32]];
        break;
      }
      case 26: {
        [self setCiphertext:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return resultProtoSenderKeyMessage.hasId;
}
- (UInt32) id {
  return resultProtoSenderKeyMessage.id;
}
- (ProtoSenderKeyMessageBuilder*) setId:(UInt32) value {
  resultProtoSenderKeyMessage.hasId = YES;
  resultProtoSenderKeyMessage.id = value;
  return self;
}
- (ProtoSenderKeyMessageBuilder*) clearId {
  resultProtoSenderKeyMessage.hasId = NO;
  resultProtoSenderKeyMessage.id = 0;
  return self;
}
- (BOOL) hasIteration {
  return resultProtoSenderKeyMessage.hasIteration;
}
- (UInt32) iteration {
  return resultProtoSenderKeyMessage.iteration;
}
- (ProtoSenderKeyMessageBuilder*) setIteration:(UInt32) value {
  resultProtoSenderKeyMessage.hasIteration = YES;
  resultProtoSenderKeyMessage.iteration = value;
  return self;
}
- (ProtoSenderKeyMessageBuilder*) clearIteration {
  resultProtoSenderKeyMessage.hasIteration = NO;
  resultProtoSenderKeyMessage.iteration = 0;
  return self;
}
- (BOOL) hasCiphertext {
  return resultProtoSenderKeyMessage.hasCiphertext;
}
- (NSData*) ciphertext {
  return resultProtoSenderKeyMessage.ciphertext;
}
- (ProtoSenderKeyMessageBuilder*) setCiphertext:(NSData*) value {
  resultProtoSenderKeyMessage.hasCiphertext = YES;
  resultProtoSenderKeyMessage.ciphertext = value;
  return self;
}
- (ProtoSenderKeyMessageBuilder*) clearCiphertext {
  resultProtoSenderKeyMessage.hasCiphertext = NO;
  resultProtoSenderKeyMessage.ciphertext = [NSData data];
  return self;
}
@end

@interface ProtoSenderKeyDistributionMessage ()
@property UInt32 id;
@property UInt32 iteration;
@property (strong) NSData* chainKey;
@property (strong) NSData* signingKey;
@end

@implementation ProtoSenderKeyDistributionMessage

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (BOOL) hasIteration {
  return !!hasIteration_;
}
- (void) setHasIteration:(BOOL) _value_ {
  hasIteration_ = !!_value_;
}
@synthesize iteration;
- (BOOL) hasChainKey {
  return !!hasChainKey_;
}
- (void) setHasChainKey:(BOOL) _value_ {
  hasChainKey_ = !!_value_;
}
@synthesize chainKey;
- (BOOL) hasSigningKey {
  return !!hasSigningKey_;
}
- (void) setHasSigningKey:(BOOL) _value_ {
  hasSigningKey_ = !!_value_;
}
@synthesize signingKey;
- (instancetype) init {
  if ((self = [super init])) {
    self.id = 0;
    self.iteration = 0;
    self.chainKey = [NSData data];
    self.signingKey = [NSData data];
  }
  return self;
}
static ProtoSenderKeyDistributionMessage* defaultProtoSenderKeyDistributionMessageInstance = nil;
+ (void) initialize {
  if (self == [ProtoSenderKeyDistributionMessage class]) {
    defaultProtoSenderKeyDistributionMessageInstance = [[ProtoSenderKeyDistributionMessage alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultProtoSenderKeyDistributionMessageInstance;
}
- (instancetype) defaultInstance {
  return defaultProtoSenderKeyDistributionMessageInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeUInt32:1 value:self.id];
  }
  if (self.hasIteration) {
    [output writeUInt32:2 value:self.iteration];
  }
  if (self.hasChainKey) {
    [output writeData:3 value:self.chainKey];
  }
  if (self.hasSigningKey) {
    [output writeData:4 value:self.signingKey];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeUInt32Size(1, self.id);
  }
  if (self.hasIteration) {
    size_ += computeUInt32Size(2, self.iteration);
  }
  if (self.hasChainKey) {
    size_ += computeDataSize(3, self.chainKey);
  }
  if (self.hasSigningKey) {
    size_ += computeDataSize(4, self.signingKey);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ProtoSenderKeyDistributionMessage*) parseFromData:(NSData*) data {
  return (ProtoSenderKeyDistributionMessage*)[[[ProtoSenderKeyDistributionMessage builder] mergeFromData:data] build];
}
+ (ProtoSenderKeyDistributionMessage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ProtoSenderKeyDistributionMessage*)[[[ProtoSenderKeyDistributionMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ProtoSenderKeyDistributionMessage*) parseFromInputStream:(NSInputStream*) input {
  return (ProtoSenderKeyDistributionMessage*)[[[ProtoSenderKeyDistributionMessage builder] mergeFromInputStream:input] build];
}
+ (ProtoSenderKeyDistributionMessage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ProtoSenderKeyDistributionMessage*)[[[ProtoSenderKeyDistributionMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ProtoSenderKeyDistributionMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ProtoSenderKeyDistributionMessage*)[[[ProtoSenderKeyDistributionMessage builder] mergeFromCodedInputStream:input] build];
}
+ (ProtoSenderKeyDistributionMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ProtoSenderKeyDistributionMessage*)[[[ProtoSenderKeyDistributionMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ProtoSenderKeyDistributionMessageBuilder*) builder {
  return [[ProtoSenderKeyDistributionMessageBuilder alloc] init];
}
+ (ProtoSenderKeyDistributionMessageBuilder*) builderWithPrototype:(ProtoSenderKeyDistributionMessage*) prototype {
  return [[ProtoSenderKeyDistributionMessage builder] mergeFrom:prototype];
}
- (ProtoSenderKeyDistributionMessageBuilder*) builder {
  return [ProtoSenderKeyDistributionMessage builder];
}
- (ProtoSenderKeyDistributionMessageBuilder*) toBuilder {
  return [ProtoSenderKeyDistributionMessage builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInteger:self.id]];
  }
  if (self.hasIteration) {
    [output appendFormat:@"%@%@: %@\n", indent, @"iteration", [NSNumber numberWithInteger:self.iteration]];
  }
  if (self.hasChainKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"chainKey", self.chainKey];
  }
  if (self.hasSigningKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"signingKey", self.signingKey];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.id] forKey: @"id"];
  }
  if (self.hasIteration) {
    [dictionary setObject: [NSNumber numberWithInteger:self.iteration] forKey: @"iteration"];
  }
  if (self.hasChainKey) {
    [dictionary setObject: self.chainKey forKey: @"chainKey"];
  }
  if (self.hasSigningKey) {
    [dictionary setObject: self.signingKey forKey: @"signingKey"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ProtoSenderKeyDistributionMessage class]]) {
    return NO;
  }
  ProtoSenderKeyDistributionMessage *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasIteration == otherMessage.hasIteration &&
      (!self.hasIteration || self.iteration == otherMessage.iteration) &&
      self.hasChainKey == otherMessage.hasChainKey &&
      (!self.hasChainKey || [self.chainKey isEqual:otherMessage.chainKey]) &&
      self.hasSigningKey == otherMessage.hasSigningKey &&
      (!self.hasSigningKey || [self.signingKey isEqual:otherMessage.signingKey]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.id] hash];
  }
  if (self.hasIteration) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.iteration] hash];
  }
  if (self.hasChainKey) {
    hashCode = hashCode * 31 + [self.chainKey hash];
  }
  if (self.hasSigningKey) {
    hashCode = hashCode * 31 + [self.signingKey hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ProtoSenderKeyDistributionMessageBuilder()
@property (strong) ProtoSenderKeyDistributionMessage* resultProtoSenderKeyDistributionMessage;
@end

@implementation ProtoSenderKeyDistributionMessageBuilder
@synthesize resultProtoSenderKeyDistributionMessage;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultProtoSenderKeyDistributionMessage = [[ProtoSenderKeyDistributionMessage alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultProtoSenderKeyDistributionMessage;
}
- (ProtoSenderKeyDistributionMessageBuilder*) clear {
  self.resultProtoSenderKeyDistributionMessage = [[ProtoSenderKeyDistributionMessage alloc] init];
  return self;
}
- (ProtoSenderKeyDistributionMessageBuilder*) clone {
  return [ProtoSenderKeyDistributionMessage builderWithPrototype:resultProtoSenderKeyDistributionMessage];
}
- (ProtoSenderKeyDistributionMessage*) defaultInstance {
  return [ProtoSenderKeyDistributionMessage defaultInstance];
}
- (ProtoSenderKeyDistributionMessage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ProtoSenderKeyDistributionMessage*) buildPartial {
  ProtoSenderKeyDistributionMessage* returnMe = resultProtoSenderKeyDistributionMessage;
  self.resultProtoSenderKeyDistributionMessage = nil;
  return returnMe;
}
- (ProtoSenderKeyDistributionMessageBuilder*) mergeFrom:(ProtoSenderKeyDistributionMessage*) other {
  if (other == [ProtoSenderKeyDistributionMessage defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasIteration) {
    [self setIteration:other.iteration];
  }
  if (other.hasChainKey) {
    [self setChainKey:other.chainKey];
  }
  if (other.hasSigningKey) {
    [self setSigningKey:other.signingKey];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ProtoSenderKeyDistributionMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ProtoSenderKeyDistributionMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setIteration:[input readUInt32]];
        break;
      }
      case 26: {
        [self setChainKey:[input readData]];
        break;
      }
      case 34: {
        [self setSigningKey:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return resultProtoSenderKeyDistributionMessage.hasId;
}
- (UInt32) id {
  return resultProtoSenderKeyDistributionMessage.id;
}
- (ProtoSenderKeyDistributionMessageBuilder*) setId:(UInt32) value {
  resultProtoSenderKeyDistributionMessage.hasId = YES;
  resultProtoSenderKeyDistributionMessage.id = value;
  return self;
}
- (ProtoSenderKeyDistributionMessageBuilder*) clearId {
  resultProtoSenderKeyDistributionMessage.hasId = NO;
  resultProtoSenderKeyDistributionMessage.id = 0;
  return self;
}
- (BOOL) hasIteration {
  return resultProtoSenderKeyDistributionMessage.hasIteration;
}
- (UInt32) iteration {
  return resultProtoSenderKeyDistributionMessage.iteration;
}
- (ProtoSenderKeyDistributionMessageBuilder*) setIteration:(UInt32) value {
  resultProtoSenderKeyDistributionMessage.hasIteration = YES;
  resultProtoSenderKeyDistributionMessage.iteration = value;
  return self;
}
- (ProtoSenderKeyDistributionMessageBuilder*) clearIteration {
  resultProtoSenderKeyDistributionMessage.hasIteration = NO;
  resultProtoSenderKeyDistributionMessage.iteration = 0;
  return self;
}
- (BOOL) hasChainKey {
  return resultProtoSenderKeyDistributionMessage.hasChainKey;
}
- (NSData*) chainKey {
  return resultProtoSenderKeyDistributionMessage.chainKey;
}
- (ProtoSenderKeyDistributionMessageBuilder*) setChainKey:(NSData*) value {
  resultProtoSenderKeyDistributionMessage.hasChainKey = YES;
  resultProtoSenderKeyDistributionMessage.chainKey = value;
  return self;
}
- (ProtoSenderKeyDistributionMessageBuilder*) clearChainKey {
  resultProtoSenderKeyDistributionMessage.hasChainKey = NO;
  resultProtoSenderKeyDistributionMessage.chainKey = [NSData data];
  return self;
}
- (BOOL) hasSigningKey {
  return resultProtoSenderKeyDistributionMessage.hasSigningKey;
}
- (NSData*) signingKey {
  return resultProtoSenderKeyDistributionMessage.signingKey;
}
- (ProtoSenderKeyDistributionMessageBuilder*) setSigningKey:(NSData*) value {
  resultProtoSenderKeyDistributionMessage.hasSigningKey = YES;
  resultProtoSenderKeyDistributionMessage.signingKey = value;
  return self;
}
- (ProtoSenderKeyDistributionMessageBuilder*) clearSigningKey {
  resultProtoSenderKeyDistributionMessage.hasSigningKey = NO;
  resultProtoSenderKeyDistributionMessage.signingKey = [NSData data];
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
